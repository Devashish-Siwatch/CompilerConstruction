** Test case 6: Testing function types  
This Includes 
1. Number and types of input and output parameters
2. static bound checking and static type checking in expressions - arithmetic and boolean (extension of test case 5) **

** Multiple level nesting using integer, real, boolean data types including static array data type**
**Variant of test case 5**


<<module function1>>
takes input [data: array[100..150] of boolean, weight: real, length: integer, b:array[35..50] of real, q:integer];
returns [R1: real, R2: integer, R3: boolean, R4: integer];
start
	declare e,f: integer;
	declare g,h: array[100..150] of boolean;
	get_value(g);
	h:=data;
	R3:= g[120] OR length<=q AND h[140];
	declare a: real;
	R2:= q+1;
	get_value(a);
	R1:= a+weight/20.50;
	R4:=f + 100;
end

<<module var_demo_array>>
takes input [x:integer, m:array [2..20] of integer, p:real];
returns [ n:integer, k: boolean];
start
	declare a,b,h:integer;	
	get_value(b);
	declare b4: array[100..150] of boolean;
	declare p: array[2..20] of integer;	
	a:= m[5]+3;				   **Not an error: array index within bounds**
	p:= m;					   **Not an error: type expressions of array variables p and m are same and assignment is a valid operation**
	k:=true;	
	p:= m + p;                                 **ERROR: array variables m and p cannot be added**
	declare v1, v2:real;	
	p[10]:= a*b-20*h;                          **Not an error: array index within bounds**
	declare b7: array[35..50] of real;			 
	while(k AND x<=m[11] OR false)
	start
		declare p, u:integer;
		declare bool1: boolean;
		declare b: array[2..20] of integer;
		declare b5, b6: array[35..50] of real;
		b:= m;
		[v1, u, bool1, n]:=use module function1 with parameters b4, v2, p, b5, u;	**not an error**			
		b[2]:= u+m[25];			   **ERROR: element of array m is out of bound** 
		p:= b[18]*18.56E+2;		   **ERROR: type mismatch **
		declare v3:integer;
		[v1, u, b7, n]:=use module function1 with parameters b4, v2, p, v3, u;	** type mismatch for output parameter v3 and for input parameter b7 **			
	end					   **ERROR: none of the conditional variables k, x, and m is assigned any value in scope 41-52**
        n:= a - p*b;				   **ERROR: types of p and b are different**
	b:= b+3;
	k:= a>b OR b>100;
	[v1, a, k, n]:=use module function1 with parameters b7, v2, p, b7, b;	**ERROR: input parameter type mismatch **			
	print(k);	
end


<<module f1>>
takes input[a: array[10..30] of integer, b:array[10..30] of integer, c:real];
returns [m:boolean, n:integer];
start
	declare x,y, p: real; 
	declare k, v2: integer;
	declare E: array[2..20] of integer;
	declare Var3, var4: array[100..150] of boolean;
	get_value(y);
	get_value(x);
	declare A,B: array[4..10] of integer;
	declare Var1, Var2: array[35..50] of real;
	get_value(B);
	declare D,C: array[10..30] of integer;
	A:=B;
	[ n, m]:=use module var_demo_array with parameters k,E,x;	 **not an error**					 
	C:=a;
	[x, k, m, n]:=use module function1 with parameters Var3, c, k, Var2, k;	**no error**			
	D:=C;	

 
	[ n, m]:=use module var_demo_array with parameters k,B,p;       **ERROR: Input parameter type of B does not match with formal parameter type**						 
	for (k in 15..40)
	start
		x:=x+k*y;				    **ERROR: Type mismatch error**
		declare u, v:real;
		declare int1: integer;
		u := y+c*34.2;
		v:= u-c*p-20.5E+2;
		[x, int1, m, n]:=use module function1 with parameters Var3, c, k, Var4, k; **ERROR: Input parameter type of Var4 does not match with formal parameter type**		
		switch(k)
		start
			case 10: declare A:real;
				 declare Q: integer;
				 declare B: array[10..30] of integer;
				 declare E: array[4..10] of integer;
				 B[9]:= k*20; 	              **ERROR: element of array B is out of bound**         	
				 B:=C;           	      **not an error**
				 E:= Q;                       **ERROR: variables E and Q are of different types	**	 
				 break;
			case 20: c:= 12.90 + u*y - c; 
				 [u, int1, u, n]:=use module function1 with parameters Var3, c, k, Var1, k; **ERROR: Output parameter type of u does not match with formal parameter type**      
				 get_value(u);
				 u:= k+12 - k*10+u;        **ERROR: Type mismatch error**  
				 int1:= 20+32;
				 k:= int1-3;               **ERROR: for loop conditional variable k is assigned value***   
				 break;
			default: v2:= D[15]+D[20];	      **not an error**	
				 [v2, u]:=use module function1 with parameters Var3, c, k, Var1, k; **ERROR: Number of output parameters does not match with that of formal parameters**       
				 break;			 	
		end
		x:=x + u*v- u<=v;                             **ERROR: Type mismatch error**
	end
	x:=c+y;	
	C[18]:= a[18]+ b[18];
	A[5]:= B[6]- 10;
	m:= A[5]< C[18] + A[11];			      **ERROR: element of array A is out of bound** 
	n:= 20*8-5;	
end



<<<driver program>>>
start
	a[-133] :=3;
	a := 22;
end
